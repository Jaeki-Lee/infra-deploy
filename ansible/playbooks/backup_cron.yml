---
- name: Setup backup cron job on storage servers
  hosts: storage
  become: true
  vars_files:
    - ../secrets/aws_creds.yml.vault
  vars:
    backup_target: "/gluster/backup"
    s3_bucket: "aws9-team1"
    aws_region: "ap-northeast-2"
    backup_script_path: "/home/user1/bin/backup_logs.sh"
    cron_time: "0 * * * *"
    volumes:
      - name: db1
        path: "/gluster/brick1/db1"
        type: "data"
      - name: db2
        path: "/gluster/brick1/db2"
        type: "data"
      - name: web
        path: "/gluster/brick1/web"
        type: "logs"
      - name: app
        path: "/gluster/brick1/app"
        type: "logs"
      - name: monitoring
        path: "/gluster/brick1/monitoring"
        type: "logs"

  tasks:
    - name: Print AWS key (디버깅용)
      debug:
        msg: "{{ aws_access_key }}"

    - name: Install required packages
      apt:
        name: awscli
        state: present
        update_cache: yes


    - name: Create .aws directory for user1
      file:
        path: /home/user1/.aws
        state: directory
        mode: '0700'
        owner: user1
        group: user1


    - name: Create backup target directory
      file:
        path: "{{ backup_target }}"
        state: directory
        mode: '0755'
        owner: user1
        group: user1

    - name: Create bin directory for user1
      file:
        path: /home/user1/bin
        state: directory
        mode: '0755'
        owner: user1
        group: user1

    - name: Create logs directory for backup script
      file:
        path: /home/user1/logs
        state: directory
        mode: '0755'
        owner: user1
        group: user1


    - name: Configure AWS CLI credentials
      copy:
        dest: "/home/user1/.aws/credentials"
        content: |
          [default]
          aws_access_key_id={{ aws_access_key }}
          aws_secret_access_key={{ aws_secret_key }}
        mode: '0600'
        owner: user1
        group: user1


    - name: Configure AWS CLI config
      copy:
        dest: "/home/user1/.aws/config"
        content: |
          [default]
          region={{ aws_region }}
          output=json
        mode: '0600'
        owner: user1
        group: user1


    - name: Create backup scripts per volume
      copy:
        dest: "/home/user1/bin/backup_{{ vol.name }}.sh"
        mode: '0755'
        owner: user1
        group: user1
        content: |
          #!/bin/bash
          set -x

          LOGFILE="/home/user1/logs/backup_{{ vol.name }}.log"
          exec >> "$LOGFILE" 2>&1

          echo "[INFO] $(date) - Backup started for {{ vol.name }}"

          TIMESTAMP=$(date +\%Y-\%m-\%d_\%H-\%M)
          BACKUP_NAME="{{ vol.name }}_{{ vol.type }}_$TIMESTAMP.tar.gz"

          mkdir -p {{ backup_target }}
          echo "[INFO] Creating tarball {{ backup_target }}/$BACKUP_NAME from {{ vol.path }}"
          tar -czf {{ backup_target }}/$BACKUP_NAME {{ vol.path }}

          echo "[INFO] Uploading $BACKUP_NAME to S3"
          AWS_ACCESS_KEY_ID={{ aws_access_key }} AWS_SECRET_ACCESS_KEY={{ aws_secret_key }} \
          aws s3 cp {{ backup_target }}/$BACKUP_NAME s3://{{ s3_bucket }}/{{ vol.name }}/$BACKUP_NAME --region {{ aws_region }}

          echo "[INFO] Cleaning up backups older than 7 days"
          find {{ backup_target }} -name "{{ vol.name }}*.tar.gz" -mtime +7 -exec rm -f {} \;

          echo "[INFO] $(date) - Backup completed for {{ vol.name }}"

      loop: "{{ volumes }}"
      loop_control:
        loop_var: vol

 
    - name: Add cron job for daily backup
      cron:
        name: "Backup cron for {{ vol.name }}"
        minute: "0"
        hour: "*"
        job: "/home/user1/bin/backup_{{ vol.name }}.sh"
        user: user1
      loop: "{{ volumes }}"
      loop_control:
        loop_var: vol
