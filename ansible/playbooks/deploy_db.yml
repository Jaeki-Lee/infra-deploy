---
- name: Deploy PostgreSQL HA Cluster
  hosts: db
  become: true

  vars:
    deploy_root: /home/user1/db_deploy               # 원격 서버에 생성할 디렉토리
    local_project_root: ../../infra-components/db_deploy                    # 로컬에서 복사할 파일 기준 경로
    patroni_files:
      - db1.yml
      - db2.yml

  tasks:
    # Docker 설치 roles/docker/tasks/main.yml의 작업 실행
    - name: Ensure Docker is installed
      include_role:
        name: common

    # 디렉토리 생성 (root, subdirs)
    - name: Create DB project root directory
      file:
        path: "{{ deploy_root }}"
        state: directory
        mode: '0755'
        owner: user1
        group: user1

    - name: Create patroni and haproxy subdirectories
      file:
        path: "{{ deploy_root }}/{{ item }}"
        state: directory
        mode: '0755'
        owner: user1
        group: user1
      loop:
        - patroni
        - haproxy

    # docker-compose.yml 복사
    - name: Copy docker-compose.yml
      copy:
        src: "{{ local_project_root }}/docker-compose.yml"
        dest: "{{ deploy_root }}/docker-compose.yml"
        owner: user1
        group: user1
        mode: '0644'

    # patroni 설정 복사
    - name: Copy Patroni config files
      copy:
        src: "{{ local_project_root }}/patroni/{{ item }}"
        dest: "{{ deploy_root }}/patroni/{{ item }}"
        owner: user1
        group: user1
        mode: '0644'
      loop: "{{ patroni_files }}"

    # haproxy 설정 복사
    - name: Copy HAProxy config
      copy:
        src: "{{ local_project_root }}/haproxy/haproxy.cfg"
        dest: "{{ deploy_root }}/haproxy/haproxy.cfg"
        owner: user1
        group: user1
        mode: '0644'

    # docker compose 실행전 기존 컨테이너 제거거
    - name: Stop and remove existing containers
      shell: docker compose down --remove-orphans || true
      args:
        chdir: "{{ deploy_root }}"

    # docker compose up 실행
    - name: Launch PostgreSQL HA Cluster
      shell: docker compose up -d
      args:
        chdir: "{{ deploy_root }}"

    # GlusterFS 설치 및 마운트
    - name: install glusterfs
      apt:
        name: glusterfs-client
        state: present

    - name: unmount glusterfs
      shell: |
        umount -l shared/mnt/db1
        umount -l shared/mnt/db2
      ignore_errors: true

    - name: Remove mount dir db1
      file:
        path: shared/mnt/db1
        state: absent
      ignore_errors: true

    - name: Remove mount dir db2
      file:
        path: shared/mnt/db2
        state: absent
      ignore_errors: true

    - name: Create mount dir db1
      file:
        path: shared/mnt/db1
        state: directory
        mode: '0777'

    - name: Create mount dir db2
      file:
        path: shared/mnt/db2
        state: directory
        mode: '0777'

    - name: GlusterFS mount db1
      mount:
        path: "shared/mnt/db1"
        src: "172.16.1.40:db1"
        fstype: glusterfs
        opts: defaults,_netdev
        state: mounted

    - name: GlusterFS mount db2
      mount:
        path: "shared/mnt/db2"
        src: "172.16.1.40:db2"
        fstype: glusterfs
        opts: defaults,_netdev
        state: mounted