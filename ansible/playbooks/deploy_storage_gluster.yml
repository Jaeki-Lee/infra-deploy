---
- name: GlusterFS Setup Playbook (Multi-volume)
  hosts: storage-server
  become: true

  vars:
    brick_path: /gluster/brick1
    volumes:
      - { name: db1,         mount: /mnt/shared/db1 }
      - { name: db2,         mount: /mnt/shared/db2 }
      - { name: webapp,      mount: /mnt/shared/webapp }
      - { name: monitoring,  mount: /mnt/shared/monitoring }

  tasks:

    - name: GlusterFS 설치
      apt:
        name: glusterfs-server
        state: present
        update_cache: yes

    - name: GlusterFS 시작 및 부팅 시 자동 시작
      systemd:
        name: glusterd
        state: started
        enabled: true

    #  실질적인 저장소
    - name: brick 디렉토리 생성
      file:
        path: "{{ brick_path }}/{{ item.name }}"
        state: directory
        recurse: yes
      loop: "{{ volumes }}"

#피어1,2를 하나로 묶는 작업
    - name: Gluster 피어 프로브 (스토리지1에서만 실행)
      shell: |
        gluster peer probe {{ hostvars['storage-server2']['ansible_host'] }}
      when: inventory_hostname == 'storage1'

    - name: 볼륨 생성 (스토리지1에서만 실행)
      shell: |
        gluster volume create {{ item.name }} replica 2 \
        {{ hostvars['storage-server1']['ansible_host'] }}:{{ brick_path }}/{{ item.name }} \
        {{ hostvars['storage-server2']['ansible_host'] }}:{{ brick_path }}/{{ item.name }}
      when: inventory_hostname == 'storage1'
      loop: "{{ volumes }}"
#만들어진 볼륨을 실제로 작동 시키는 단계 이것을 해야 클라이언트가 mount 명령으로 접근 가능
    - name: 볼륨 시작 (스토리지1에서만 실행)
      shell: gluster volume start {{ item.name }}
      when: inventory_hostname == 'storage1'
      loop: "{{ volumes }}"

### 클라이언트에서 할 것

#- name: 마운트 지점 생성
#  file:
#    path: "{{ item.mount }}"
#    state: directory
#  loop: "{{ volumes }}"


#- name: GlusterFS 볼륨 마운트
#  mount:
#    path: "{{ item.mount }}"
#    src: "{{ hostvars['storage-server1']['ansible_host'] }}:/{{ item.name }}"
#    fstype: glusterfs
#    opts: defaults,_netdev
#    state: mounted
#  loop: "{{ volumes }}"
